#--------------------------------------------------------------------------#
#-------------- MySql configs (use only if disable H2) --------------------#

# DISABLE these MySQL configs if use H2
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Select the database name created with e.g. MySQL Workbench:
spring.datasource.url=jdbc:mysql://localhost:3306/carrental

# If this spring app is containerized:
#spring.datasource.url=jdbc:mysql://192.168.0.153:3306/carrental
#spring.datasource.url=jdbc:mysql://172.17.0.1:3306/carrental

# MySQL instance credentials
spring.datasource.username=spring
spring.datasource.password=spring
#spring.datasource.username=root
#spring.datasource.password=root

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

#--------------------------------------------------------------------------#
#-------------- H2 database (use only if disable MySQL) -------------------#

#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Uncomment only one of these datasource, see readme.md
# Enable h2-console AND db connection in intelliJ;
#spring.datasource.url=jdbc:h2:file:/data/carrental;AUTO_SERVER=TRUE
# Enable only H2 in memory:
#spring.datasource.url=jdbc:h2:mem:carrental

# Enabling the H2 console at http://localhost:THIS-PORT/h2-console
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

#--------------------------------------------------------------------------#
#----------- JPA configs etc, regardless of db type -----------------#

# Enable initializing data from data.sql without using schema.sql:
spring.jpa.defer-datasource-initialization=true
# Always start from data.sql (alone, or together with commandlineRunner):
#spring.sql.init.mode=always
# Manually running the data.sql (if e.g. need more mock data):
#spring.sql.init.mode=never
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

#--------------------------------------------------------------------------#
#----------------- Keycloak configurations --------------------------------#

server.port=9090
keycloak.realm=car-rental-realm

#keycloak.auth-server-url=http://localhost:8080/auth
# for Quarkus provided keycloak; without /auth:
keycloak.auth-server-url=http://localhost:8080
# If containerized keycloak:
#keycloak.auth-server-url=http://192.168.0.153:8080

keycloak.ssl-required=external
keycloak.resource=car-rental-v100
keycloak.enabled=true
keycloak.principal-attribute=preferred_username
keycloak.public-client=true
keycloak.autodetect-bearer-only=true
use-resource-role-mappings=true
# Increase operation messages in console
#logging.level.root=debug

#--------------------------------------------------------------------------#
#----------- Eureka server configuration for microservices ----------------#

# DISABLED/set to FALSE here in CAR-RENTAL-V2
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.hostname=localhost
spring.application.name=CAR-RENTAL-V2